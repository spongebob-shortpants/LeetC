/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

//Preorder 100%
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> list=new LinkedList<>();
        if(root==null) return list;
        Stack<TreeNode> stack=new Stack<>();
        stack.push(root);
        while(!stack.isEmpty()){
            TreeNode node= stack.pop();
            list.add(node.val);
            if(node.right!=null){
                stack.push(node.right);
            }
            if(node.left!=null){
                stack.push(node.left);
            }
        }
        return list;    
    }
}


//Inorder 100%
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> list= new LinkedList<>();
        if(root==null) return list;
        Stack<TreeNode> stack=new Stack<>();
        while(!stack.isEmpty()||root!=null){
            if(root!=null){
                stack.push(root);
                root=root.left;
            }else{
                TreeNode popped= stack.pop();
                list.add(popped.val);
                root=popped.right;
            }
        }
        return list;
    }
}

//Postorder 100%
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> list =new LinkedList<>();
        if(root==null) return list;
        Stack<TreeNode> stack1=new Stack<>();
        Stack<TreeNode> stack2=new Stack<>();
        stack1.push(root);
        while(!stack1.isEmpty()){
            TreeNode popped=stack1.pop();
            stack2.push(popped);
            if(popped.left!=null){
                stack1.push(popped.left);
            }
            if(popped.right!=null){
                stack1.push(popped.right);
            }
        }
        while(!stack2.isEmpty()){
            list.add(stack2.pop().val);
        }
        return list;
    }
}

//Levelorder 100%
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> list=new LinkedList<>();
        if(root==null) return list;
        List<Integer> tempList=new LinkedList<>();
        Queue<TreeNode> queue=new LinkedList<>();
        queue.offer(root);
        int levelSize=1;
        while(!queue.isEmpty()){
            TreeNode node=queue.poll();
            tempList.add(node.val);
            levelSize--;
            if(node.left!=null){
                queue.offer(node.left);
            }
            if(node.right!=null){
                queue.offer(node.right);
            }
            if(levelSize==0){
                levelSize=queue.size();
                list.add(tempList);
                tempList=new LinkedList<>();
            }
        }   
       return list; 
    }   
}

//Maximum height 14.64%
class Solution {
    public int maxDepth(TreeNode root) {
        if(root==null)return 0;
        Queue<TreeNode> queue = new LinkedList<>();
        int height=0;
        int levelSize=1;
        queue.offer(root);
        while(!queue.isEmpty()){
            TreeNode node=queue.poll();
            levelSize--;
            if(node.left!=null){
                queue.offer(node.left);
            }
            if(node.right!=null){
                queue.offer(node.right);
            }
            if(levelSize==0){
                height++;
                levelSize=queue.size();
            }
        }
       return height; 
    }
}

//Level Order Bottom up 85.44%
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> list=new LinkedList<>();
        List<Integer> tempList=new LinkedList<>();
        if(root==null) return list;
        Queue<TreeNode> queue= new LinkedList<>();
        Stack<List> tempStack= new Stack<>();
        int levelSize=1;
        queue.offer(root);
        while(!queue.isEmpty()){
            TreeNode node=queue.poll();
            tempList.add(node.val);
            levelSize--;
            if(node.left!=null){
                queue.offer(node.left);
            }
            if(node.right!=null){
                queue.offer(node.right);
            }
            if(levelSize==0){
                tempStack.push(tempList);
                levelSize=queue.size();
                tempList= new LinkedList<>();
            }
        }
        while(!tempStack.isEmpty()){
            list.add(tempStack.pop());
        }
        return list;
    }
}

//maximum width 94.83%
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        if(root==null) return 0;
        Queue<Pair<TreeNode,Integer>> queue=new LinkedList<>();
        queue.offer(new Pair<>(root, 0));
        int width= 0;
        while (!queue.isEmpty()) {
            int size=queue.size();
            int left=0;
            int right=0;
            for(int i=0;i<size;i++){
                Pair<TreeNode, Integer> pair=queue.poll();
                int index=pair.getValue();
                TreeNode node = pair.getKey();
                if (i == 0) left = index;
                if (i == size - 1) right=index;
                if (node.left != null){
                    queue.offer(new Pair<>(node.left, (index<<1)+1));  
                }
                if (node.right != null){
                    queue.offer(new Pair<>(node.right, (index<<1)+2));
                }
           }
            width=Math.max(width, right-left+1);
        }
        return width;
    }
}


//n-arry tree preorder traversal 37.45%
/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
    public List<Integer> preorder(Node root) {
        List<Integer> list= new LinkedList<>();
        if(root==null) return list;
        Stack<Node> stack=new Stack<>();
        stack.push(root);
        while(!stack.isEmpty()){
            Node node=stack.pop();
            list.add(node.val);
            List<Node> templist=node.children;
            for(int i=templist.size()-1;i>=0;i--){
                stack.push(templist.get(i));
            }
        }
        return list;  
    }
}


//n-arry tree preorder traversal 21.13%
class Solution {
    public List<Integer> postorder(Node root) {
        List<Integer> list= new LinkedList<>();
        if(root==null) return list;
        Stack<Node> stack1=new Stack<>();
        Stack<Node> stack2=new Stack<>();
        stack1.push(root);
        while(!stack1.isEmpty()){
            Node node=stack1.pop();
            stack2.push(node);
            List<Node> templist=node.children;
            for(int i=0;i<templist.size();i++){
                stack1.push(templist.get(i));
            }
        }
        while(!stack2.isEmpty()){
            list.add(stack2.pop().val);
        }  
        return list;
    }
}


// maximum depth of n-arry tree 41.96%
class Solution {
    public int maxDepth(Node root) {
        if(root==null) return 0;
        Queue<Node> queue=new LinkedList<>();
        queue.offer(root);
        int levelsize=1;
        int height=0;
        while(!queue.isEmpty()){
            Node node=queue.poll();
            levelsize--;
            List<Node> templist=node.children;
            for(int i=0; i<templist.size();i++){
                queue.offer(templist.get(i));
            }
            if(levelsize==0){
                height++;
                levelsize=queue.size();
            }
        }
        return height;
        
    }
}

//Flatten Tree 100%
class Solution {
    public void flatten(TreeNode root) {
        while(root!=null){
            if (root.left != null) {
                TreeNode oldRight = root.right;
                root.right = root.left;
                root.left = null;
                TreeNode cur = root;
                while (cur.right != null) {
                    cur = cur.right;
                }
                cur.right = oldRight;
                }
                root = root.right;
         }
    }      
}


//Construct Binary Tree from Inorder and Postorder Traversal 96.96%
class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
         Map<Integer,Integer> map= new HashMap<>();
        for(int i=0;i<inorder.length;i++){
             map.put(inorder[i],i);
        }
        return postIn(postorder,map,0,postorder.length-1,0,inorder.length-1);
    }
    public TreeNode postIn(int[] postorder,Map<Integer,Integer> map, int postL, int postR, int inL, int inR){
        if(postL>postR) return null;
        TreeNode root= new TreeNode(postorder[postR]);
        int index=map.get(root.val);
        int length=inR-index;
        root.left=postIn(postorder,map,postL,postR-1-length,inL,index-1);
        root.right=postIn(postorder,map,postR-length,postR-1,index+1,inR);
        return root;
        
    }
}



//Construct Binary Tree from Inorder and Preorder Traversal 99.01%
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        Map<Integer,Integer> map= new HashMap<>();
        for(int i=0;i<inorder.length;i++){
             map.put(inorder[i],i);
        }
        return preIn(preorder,map,0,preorder.length-1,0,inorder.length-1);
    }
    public TreeNode preIn(int[] preorder,Map<Integer,Integer> map, int preL, int preR, int inL, int inR){
        if(preL>preR) return null;
        TreeNode root= new TreeNode(preorder[preL]);
        int index=map.get(root.val);
        int length=index-inL;
        root.left=preIn(preorder,map,preL+1,preL+length,inL,index-1);
        root.right=preIn(preorder,map,preL+length+1,preR,index+1,inR);
        return root;
        
    }
}



// Construct Binary Tree from Preorder and Postorder Traversal 64.92%
class Solution {
    public TreeNode constructFromPrePost(int[] pre, int[] post) {
        Map<Integer,Integer> map= new HashMap<>();
        for(int i=0;i<post.length;i++){
             map.put(post[i],i);
        }
        return prePost(pre,map,0,pre.length-1,0,post.length-1);
    }
    public TreeNode prePost(int[] pre,Map<Integer,Integer> map, int preL, int preR, int postL, int postR){
        if(postL>postR) return null;
        TreeNode root= new TreeNode(pre[preL]);
        if(preL==preR)return root;
        int index=map.get(pre[++preL]);
        int length=index-postL+1;
        root.left=prePost(pre,map,preL,preL+length-1,postL,index);
        root.right=prePost(pre,map,preL+length,preR,index+1,--postR);
        return root;
        
    }
}




//Is symmetric 100% (用queue）
class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root==null) return true;
        Queue<TreeNode> queue = new LinkedList();
        queue.offer(root.left);
        queue.offer(root.right);
        while(!queue.isEmpty()){
            TreeNode node1 = queue.poll();
            TreeNode node2 = queue.poll();
            if(node1==null && node2==null) continue;
            if(node1==null || node2==null || node1.val!=node2.val) return false;
            queue.offer(node1.left);
            queue.offer(node2.right);
            queue.offer(node1.right);
            queue.offer(node2.left);
        }
        return true;    
    }
}

